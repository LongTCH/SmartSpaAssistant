services:
  postgres:
    image: groonga/pgroonga:4.0.1-alpine-17
    container_name: postgres
    networks: [ 'chatbot_network' ]
    restart: unless-stopped
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=e383b425-76f6-4562-9287-e2f8253c0056
      - POSTGRES_DB=smart_spa
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d smart_spa"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: [ 'chatbot_network' ]
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
  server:
    image: longtch/chatbot-server
    container_name: server
    networks: [ 'chatbot_network' ]
    restart: unless-stopped
    environment:
      - API_VERSION=v1
      - DATABASE_URL=postgresql+asyncpg://root:e383b425-76f6-4562-9287-e2f8253c0056@postgres:5432/smartspa
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_SCRIPT_COLLECTION_NAME=chatbot_scripts
      - QDRANT_SHEET_COLLECTION_NAME=chatbot_sheets
      - JINA_API_KEY=jina_be550a17e32f4a8689a21e080d19314a_y9XFNROWzV9v1Q_FpD7e5HE8joA
    expose:
      - 8080    
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started

  client:
    image: longtch/chatbot-client
    container_name: client
    networks: [ 'chatbot_network' ]
    restart: unless-stopped
    environment:
    
      # Next.js API Configuration
      - NEXT_PUBLIC_API_VERSION=v1
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=your-production-google-client-id
      - NEXT_PUBLIC_OAUTH_REDIRECT_HOST=http://localhost/api/v1
      
      # Domain and Base URL Configuration
      - NEXT_PUBLIC_DOMAIN=localhost
      - NEXT_PUBLIC_BASE_URL=http://localhost
      
      # External API URLs (for browser requests)
      - NEXT_PUBLIC_API_URL=http://localhost/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost/api/v1/ws
      
      # Internal API URL (for server-side requests within Docker network)
      - NEXT_PUBLIC_SSR_API_URL=http://server:8080/api/v1
      
      # Container Configuration
      - PORT=3000
      - HOSTNAME=0.0.0.0
    expose:
      - 3000
    depends_on:
      - server

  nginx:
    image: longtch/chatbot-nginx
    container_name: nginx
    networks: [ 'chatbot_network' ]
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - client
      - server

volumes:
  postgres_data:
    name: chatbot_postgres_data
  qdrant_data:
    name: chatbot_qdrant_data

networks:
  chatbot_network:
    name: chatbot_network
    driver: bridge
