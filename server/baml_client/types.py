###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

from typing import Dict, Generic, List, Literal, TypeVar, Union

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from pydantic import BaseModel

T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class BAMLMessage(BaseModel):
    role: Union[Literal["user"], Literal["assistant"]]
    content: str

class ScriptRetrieveAgentOutput(BaseModel):
    should_query_sheet: bool
    pieces_of_information: List[str]

class SheetAgentOutput(BaseModel):
    sql_query: str

class SheetRAGAgentOutput(BaseModel):
    sheet_id: str
    limit: int
    rag_query: str
