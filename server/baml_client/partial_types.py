###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

from typing import Generic, List, Literal, Optional, TypeVar, Union

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from pydantic import BaseModel

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class BAMLMessage(BaseModel):
    role: Optional[Union[Literal["user"], Literal["assistant"]]] = None
    content: Optional[str] = None

class ChatResponseItem(BaseModel):
    type: Optional[Union[Literal["text"], Literal["image"], Literal["video"], Literal["audio"], Literal["file"], Literal["link"]]] = None
    payload: Optional[str] = None

class ScriptRetrieveAgentOutput(BaseModel):
    should_query_sheet: Optional[bool] = None
    pieces_of_information: List[str]

class SheetAgentOutput(BaseModel):
    sql_query: Optional[str] = None
    sheet_id: Optional[str] = None
    limit: Optional[int] = None

class SheetGuardAgentOutput(BaseModel):
    should_query_sheet: Optional[bool] = None

class SheetRAGAgentOutput(BaseModel):
    sheet_id: Optional[str] = None
    limit: Optional[int] = None
    rag_query: Optional[str] = None
