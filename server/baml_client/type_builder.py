###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing

from baml_py.baml_py import ClassBuilder, FieldType
from baml_py.type_builder import ClassPropertyViewer
from baml_py.type_builder import TypeBuilder as _TypeBuilder

from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["BAMLMessage","ChatResponseItem","GetAllSheetsTool","GetLocation","GetTimezone","OutputTool","SQLQueryTool","ScriptRetrieveAgentOutput","SheetAgentOutput","SheetGuardAgentOutput",]
        ), enums=set(
          []
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def BAMLMessage(self) -> "BAMLMessageAst":
        return BAMLMessageAst(self)

    @property
    def ChatResponseItem(self) -> "ChatResponseItemAst":
        return ChatResponseItemAst(self)

    @property
    def GetAllSheetsTool(self) -> "GetAllSheetsToolAst":
        return GetAllSheetsToolAst(self)

    @property
    def GetLocation(self) -> "GetLocationAst":
        return GetLocationAst(self)

    @property
    def GetTimezone(self) -> "GetTimezoneAst":
        return GetTimezoneAst(self)

    @property
    def OutputTool(self) -> "OutputToolAst":
        return OutputToolAst(self)

    @property
    def SQLQueryTool(self) -> "SQLQueryToolAst":
        return SQLQueryToolAst(self)

    @property
    def ScriptRetrieveAgentOutput(self) -> "ScriptRetrieveAgentOutputAst":
        return ScriptRetrieveAgentOutputAst(self)

    @property
    def SheetAgentOutput(self) -> "SheetAgentOutputAst":
        return SheetAgentOutputAst(self)

    @property
    def SheetGuardAgentOutput(self) -> "SheetGuardAgentOutputAst":
        return SheetGuardAgentOutputAst(self)





class BAMLMessageAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("BAMLMessage")
        self._properties: typing.Set[str] = set([ "role",  "content", ])
        self._props = BAMLMessageProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "BAMLMessageProperties":
        return self._props


class BAMLMessageViewer(BAMLMessageAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class BAMLMessageProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def role(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("role"))

    @property
    def content(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("content"))

    

class ChatResponseItemAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ChatResponseItem")
        self._properties: typing.Set[str] = set([ "type",  "payload", ])
        self._props = ChatResponseItemProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ChatResponseItemProperties":
        return self._props


class ChatResponseItemViewer(ChatResponseItemAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ChatResponseItemProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def payload(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("payload"))

    

class GetAllSheetsToolAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("GetAllSheetsTool")
        self._properties: typing.Set[str] = set([ "tool_name", ])
        self._props = GetAllSheetsToolProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "GetAllSheetsToolProperties":
        return self._props


class GetAllSheetsToolViewer(GetAllSheetsToolAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class GetAllSheetsToolProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def tool_name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_name"))

    

class GetLocationAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("GetLocation")
        self._properties: typing.Set[str] = set([ "tool_name", ])
        self._props = GetLocationProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "GetLocationProperties":
        return self._props


class GetLocationViewer(GetLocationAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class GetLocationProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def tool_name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_name"))

    

class GetTimezoneAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("GetTimezone")
        self._properties: typing.Set[str] = set([ "tool_name",  "city", ])
        self._props = GetTimezoneProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "GetTimezoneProperties":
        return self._props


class GetTimezoneViewer(GetTimezoneAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class GetTimezoneProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def tool_name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_name"))

    @property
    def city(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("city"))

    

class OutputToolAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("OutputTool")
        self._properties: typing.Set[str] = set([ "tool_name",  "message_parts", ])
        self._props = OutputToolProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "OutputToolProperties":
        return self._props


class OutputToolViewer(OutputToolAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class OutputToolProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def tool_name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_name"))

    @property
    def message_parts(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("message_parts"))

    

class SQLQueryToolAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SQLQueryTool")
        self._properties: typing.Set[str] = set([ "tool_name",  "query", ])
        self._props = SQLQueryToolProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SQLQueryToolProperties":
        return self._props


class SQLQueryToolViewer(SQLQueryToolAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SQLQueryToolProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def tool_name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool_name"))

    @property
    def query(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("query"))

    

class ScriptRetrieveAgentOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ScriptRetrieveAgentOutput")
        self._properties: typing.Set[str] = set([ "should_query_sheet",  "pieces_of_information", ])
        self._props = ScriptRetrieveAgentOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ScriptRetrieveAgentOutputProperties":
        return self._props


class ScriptRetrieveAgentOutputViewer(ScriptRetrieveAgentOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ScriptRetrieveAgentOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def should_query_sheet(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("should_query_sheet"))

    @property
    def pieces_of_information(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("pieces_of_information"))

    

class SheetAgentOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SheetAgentOutput")
        self._properties: typing.Set[str] = set([ "sql_query",  "sheet_id",  "limit", ])
        self._props = SheetAgentOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SheetAgentOutputProperties":
        return self._props


class SheetAgentOutputViewer(SheetAgentOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SheetAgentOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def sql_query(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("sql_query"))

    @property
    def sheet_id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("sheet_id"))

    @property
    def limit(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("limit"))

    

class SheetGuardAgentOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SheetGuardAgentOutput")
        self._properties: typing.Set[str] = set([ "should_query_sheet", ])
        self._props = SheetGuardAgentOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SheetGuardAgentOutputProperties":
        return self._props


class SheetGuardAgentOutputViewer(SheetGuardAgentOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SheetGuardAgentOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def should_query_sheet(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("should_query_sheet"))

    




__all__ = ["TypeBuilder"]