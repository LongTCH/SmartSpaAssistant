###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing

from baml_py.baml_py import ClassBuilder, FieldType
from baml_py.type_builder import ClassPropertyViewer
from baml_py.type_builder import TypeBuilder as _TypeBuilder

from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["BAMLMessage","ScriptRetrieveAgentOutput","SheetAgentOutput","SheetRAGAgentOutput",]
        ), enums=set(
          []
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def BAMLMessage(self) -> "BAMLMessageAst":
        return BAMLMessageAst(self)

    @property
    def ScriptRetrieveAgentOutput(self) -> "ScriptRetrieveAgentOutputAst":
        return ScriptRetrieveAgentOutputAst(self)

    @property
    def SheetAgentOutput(self) -> "SheetAgentOutputAst":
        return SheetAgentOutputAst(self)

    @property
    def SheetRAGAgentOutput(self) -> "SheetRAGAgentOutputAst":
        return SheetRAGAgentOutputAst(self)





class BAMLMessageAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("BAMLMessage")
        self._properties: typing.Set[str] = set([ "role",  "content", ])
        self._props = BAMLMessageProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "BAMLMessageProperties":
        return self._props


class BAMLMessageViewer(BAMLMessageAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class BAMLMessageProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def role(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("role"))

    @property
    def content(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("content"))

    

class ScriptRetrieveAgentOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ScriptRetrieveAgentOutput")
        self._properties: typing.Set[str] = set([ "should_query_sheet",  "pieces_of_information", ])
        self._props = ScriptRetrieveAgentOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ScriptRetrieveAgentOutputProperties":
        return self._props


class ScriptRetrieveAgentOutputViewer(ScriptRetrieveAgentOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ScriptRetrieveAgentOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def should_query_sheet(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("should_query_sheet"))

    @property
    def pieces_of_information(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("pieces_of_information"))

    

class SheetAgentOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SheetAgentOutput")
        self._properties: typing.Set[str] = set([ "sql_query", ])
        self._props = SheetAgentOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SheetAgentOutputProperties":
        return self._props


class SheetAgentOutputViewer(SheetAgentOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SheetAgentOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def sql_query(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("sql_query"))

    

class SheetRAGAgentOutputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SheetRAGAgentOutput")
        self._properties: typing.Set[str] = set([ "sheet_id",  "limit",  "rag_query", ])
        self._props = SheetRAGAgentOutputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SheetRAGAgentOutputProperties":
        return self._props


class SheetRAGAgentOutputViewer(SheetRAGAgentOutputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SheetRAGAgentOutputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def sheet_id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("sheet_id"))

    @property
    def limit(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("limit"))

    @property
    def rag_query(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("rag_query"))

    




__all__ = ["TypeBuilder"]