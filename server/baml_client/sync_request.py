###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import List, TypedDict

import baml_py
from typing_extensions import NotRequired

from . import types
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class HttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def MemoryAgent(
        self,
        user_prompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "MemoryAgent",
        {
          "user_prompt": user_prompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def MessageRewriteAgent(
        self,
        user_prompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "MessageRewriteAgent",
        {
          "user_prompt": user_prompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ScriptRetrieveAgent(
        self,
        dynamic_system_prompt: str,user_prompt: str,message_history: List[types.BAMLMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ScriptRetrieveAgent",
        {
          "dynamic_system_prompt": dynamic_system_prompt,"user_prompt": user_prompt,"message_history": message_history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SheetAgent(
        self,
        dynamic_system_prompt: str,user_prompt: str,message_history: List[types.BAMLMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SheetAgent",
        {
          "dynamic_system_prompt": dynamic_system_prompt,"user_prompt": user_prompt,"message_history": message_history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SheetRAGAgent(
        self,
        dynamic_system_prompt: str,user_prompt: str,message_history: List[types.BAMLMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SheetRAGAgent",
        {
          "dynamic_system_prompt": dynamic_system_prompt,"user_prompt": user_prompt,"message_history": message_history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SyntheticAgent(
        self,
        dynamic_system_prompt: str,user_prompt: str,message_history: List[types.BAMLMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SyntheticAgent",
        {
          "dynamic_system_prompt": dynamic_system_prompt,"user_prompt": user_prompt,"message_history": message_history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class HttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def MemoryAgent(
        self,
        user_prompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "MemoryAgent",
        {
          "user_prompt": user_prompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def MessageRewriteAgent(
        self,
        user_prompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "MessageRewriteAgent",
        {
          "user_prompt": user_prompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ScriptRetrieveAgent(
        self,
        dynamic_system_prompt: str,user_prompt: str,message_history: List[types.BAMLMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ScriptRetrieveAgent",
        {
          "dynamic_system_prompt": dynamic_system_prompt,"user_prompt": user_prompt,"message_history": message_history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SheetAgent(
        self,
        dynamic_system_prompt: str,user_prompt: str,message_history: List[types.BAMLMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SheetAgent",
        {
          "dynamic_system_prompt": dynamic_system_prompt,"user_prompt": user_prompt,"message_history": message_history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SheetRAGAgent(
        self,
        dynamic_system_prompt: str,user_prompt: str,message_history: List[types.BAMLMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SheetRAGAgent",
        {
          "dynamic_system_prompt": dynamic_system_prompt,"user_prompt": user_prompt,"message_history": message_history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SyntheticAgent(
        self,
        dynamic_system_prompt: str,user_prompt: str,message_history: List[types.BAMLMessage],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SyntheticAgent",
        {
          "dynamic_system_prompt": dynamic_system_prompt,"user_prompt": user_prompt,"message_history": message_history,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["HttpRequest", "HttpStreamRequest"]