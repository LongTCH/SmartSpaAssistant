"""
Test h√†m parse_and_format_message v·ªõi d·ªØ li·ªáu c·ª• th·ªÉ t·ª´ user
"""

import os
import sys

from app.utils.message_utils import parse_and_format_message

sys.path.append(os.path.join(os.path.dirname(__file__), "..", ".."))


def test_user_data():
    """Test v·ªõi d·ªØ li·ªáu c·ª• th·ªÉ t·ª´ user"""
    message = """Ch√†o Ch·ªã! üåü

Mailisa Spa hi·ªán c√≥ m·ªôt s·ªë s·∫£n ph·∫©m tr·ªã n√°m r·∫•t hi·ªáu qu·∫£. D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c s·∫£n ph·∫©m c√πng th√¥ng tin chi ti·∫øt:

---

### 1. **B·ªò N3 ‚Äì H·ªñ TR·ª¢ LO·∫†I B·ªé N√ÅM, T√ÄN NHANG, ƒê·ªíI M·ªíI**
- **M√¥ t·∫£:** B·ªô s·∫£n ph·∫©m h·ªó tr·ª£ l√†m ƒë·∫πp da n√°m, gi√∫p nghi·ªÅn n√°t s·∫Øc t·ªë, l√†m s√°ng da v√† kh·ªèe da.
- **Gi√° g·ªëc:** 2.550.000 VNƒê
- **Gi√° khuy·∫øn m√£i:** 2.100.000 VNƒê

---

### 2. **B·ªò NM1 ‚Äì D√ÄNH CHO DA N√ÅM M·ª§N**
- **M√¥ t·∫£:** Gi√∫p lo·∫°i b·ªè n√°m, t√†n nhang, gi·∫£m th√¢m m·ª•n, c√¢n b·∫±ng d·∫ßu nh·ªùn v√† l√†m s√°ng da.
- **Gi√° g·ªëc:** 2.800.000 VNƒê
- **Gi√° khuy·∫øn m√£i:** 2.289.000 VNƒê

---

### 3. **M01 ‚Äì KEM LO·∫†I B·ªé S·∫ÆC T·ªê**
- **M√¥ t·∫£:** Gi√∫p lo·∫°i b·ªè th√¢m, s·∫°m, n√°m tr√™n b·ªÅ m·∫∑t da, l√†m s√°ng da v√† c·∫£i thi·ªán l√†n da v√†ng s·∫≠m m√†u.
- **Gi√° g·ªëc:** 910.000 VNƒê
- **Gi√° khuy·∫øn m√£i:** 750.000 VNƒê

---

### 4. **M03 ‚Äì KEM X√ìA TH√ÇM L√ÄM S√ÅNG DA**
- **M√¥ t·∫£:** Lo·∫°i b·ªè s·∫Øc t·ªë ƒëen s·∫°m, cung c·∫•p n∆∞·ªõc v√† d∆∞·ª°ng ch·∫•t, l√†m s√°ng t√¥ng m√†u da.
- **Gi√° g·ªëc:** 940.000 VNƒê
- **Gi√° khuy·∫øn m√£i:** 770.000 VNƒê

---

### 5. **M10 ‚Äì KEM KH·ªêNG CH·∫æ S·∫ÆC T·ªê**
- **M√¥ t·∫£:** Gi√∫p kh·ªëng ch·∫ø s·∫Øc t·ªë Melanin, cung c·∫•p d∆∞·ª°ng ch·∫•t cho da s√°ng v√† c·∫£i thi·ªán hi·ªáu qu·∫£.
- **Gi√° g·ªëc:** 550.000 VNƒê
- **Gi√° khuy·∫øn m√£i:** 450.000 VNƒê

---

N·∫øu Ch·ªã c·∫ßn th√™m th√¥ng tin chi ti·∫øt v·ªÅ b·∫•t k·ª≥ s·∫£n ph·∫©m n√†o ho·∫∑c mu·ªën ƒë·∫∑t h√†ng, h√£y cho em bi·∫øt nh√©! Em lu√¥n s·∫µn s√†ng h·ªó tr·ª£! üíñ"""

    print("=" * 80)
    print("TEST D·ªÆ LI·ªÜU USER")
    print("=" * 80)

    print(f"Input length: {len(message)} characters")
    print("\nInput message:")
    print(message)

    print("\n" + "=" * 80)
    print("RUNNING parse_and_format_message...")
    print("=" * 80)

    try:
        result = parse_and_format_message(message, char_limit=2000)

        print(f"\nResult: {len(result)} parts")
        print("-" * 40)

        for i, part in enumerate(result, 1):
            print(f"Part {i}: [{part.type.upper()}] ({len(part.payload)} chars)")
            print(
                f"Content: {part.payload[:100]}{'...' if len(part.payload) > 100 else ''}"
            )
            print("-" * 40)

        # Ki·ªÉm tra c√≥ v·∫•n ƒë·ªÅ g√¨ kh√¥ng
        text_parts = [part for part in result if part.type == "text"]
        media_parts = [
            part for part in result if part.type in ["image", "video", "audio", "file"]
        ]

        print(f"\nSummary:")
        print(f"- Text parts: {len(text_parts)}")
        print(f"- Media parts: {len(media_parts)}")

        # Ki·ªÉm tra ƒë·ªô d√†i
        for i, part in enumerate(text_parts, 1):
            if len(part.payload) > 2000:
                print(f"‚ö†Ô∏è  Text part {i} v∆∞·ª£t qu√° 2000 chars: {len(part.payload)}")

        # Ki·ªÉm tra n·ªôi dung b·ªã m·∫•t
        full_text = " ".join([part.payload for part in text_parts])

        # Ki·ªÉm tra m·ªôt s·ªë t·ª´ kh√≥a quan tr·ªçng
        keywords = ["Mailisa Spa", "B·ªò N3", "B·ªò NM1", "M01", "M03", "M10", "üåü", "üíñ"]
        missing_keywords = []

        for keyword in keywords:
            if keyword not in full_text:
                missing_keywords.append(keyword)

        if missing_keywords:
            print(f"‚ö†Ô∏è  Missing keywords: {missing_keywords}")
        else:
            print("‚úÖ All keywords preserved")

        print("\n" + "=" * 80)
        print("TEST COMPLETED")
        print("=" * 80)

    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    test_user_data()
