"""
Test case v·ªõi markdown links trong message
"""

import os
import sys

from app.utils.message_utils import parse_and_format_message

sys.path.append(os.path.join(os.path.dirname(__file__), "..", ".."))


def test_markdown_links_case():
    """Test case v·ªõi markdown links trong message"""
    message = """### C√°c s·∫£n ph·∫©m tr·ªã m·ª•n gi√° d∆∞·ªõi 1 tri·ªáu t·∫°i Mailisa üåü

1. **M01 ‚Äì KEM LO·∫†I B·ªé S·∫ÆC T·ªê**
   - **Gi√°:** 750.000 ƒê
   - **M√¥ t·∫£:** Gi√∫p lo·∫°i b·ªè th√¢m, s·∫°m, n√°m tr√™n b·ªÅ m·∫∑t da, l√†m s√°ng da v√† c·∫£i thi·ªán l√†n da v√†ng s·∫≠m m√†u.
   - **[Xem chi ti·∫øt v√† mua h√†ng](https://mailisa.com/kem-loai-bo-sac-to/)**

---

2. **M19 ‚Äì S·ªÆA R·ª¨A M·∫∂T S·∫†CH S√ÇU ACID AMINO**
   - **Gi√°:** 299.000 ƒê
   - **M√¥ t·∫£:** L√†m s·∫°ch da s√¢u t·ª´ b√™n trong, cung c·∫•p d∆∞·ª°ng ch·∫•t v√† c√¢n b·∫±ng ƒë·ªô ·∫©m, gi√∫p da m·ªÅm m·∫°i v√† m·ªãn m√†ng.
   - **[Xem chi ti·∫øt v√† mua h√†ng](https://mailisa.com/san-pham/sua-rua-mat-sach-sau-acid-amino/)**

---

3. **M23 ‚Äì KEM CH·ªêNG N·∫ÆNG CHE KHUY·∫æT ƒêI·ªÇM BB NANO**
   - **Gi√°:** 399.000 ƒê
   - **M√¥ t·∫£:** Cung c·∫•p d∆∞·ª°ng ch·∫•t v√† ƒë·ªô ·∫©m cho da, gi√∫p da sƒÉn ch·∫Øc v√† ƒë·ªÅu m√†u, b·∫£o v·ªá da kh·ªèi t√°c ƒë·ªông c·ªßa √°nh n·∫Øng m·∫∑t tr·ªùi.
   - **[Xem chi ti·∫øt v√† mua h√†ng](https://mailisa.com/san-pham/kem-chong-nang-che-khuyet-diem-bb-nano/)**

---

N·∫øu Ch·ªã c·∫ßn th√™m th√¥ng tin ho·∫∑c mu·ªën ƒë·∫∑t h√†ng, h√£y cho em bi·∫øt nh√©! üíñ"""

    print("Testing markdown links case...")
    print(f"Message length: {len(message)} characters")
    print("=" * 60)

    result = parse_and_format_message(message)

    print(f"Number of parts: {len(result)}")
    print("\nParts breakdown:")

    for i, part in enumerate(result, 1):
        print(f"\nPart {i}: [{part.type.upper()}] ({len(part.payload)} chars)")
        print("-" * 40)
        print(part.payload)
        print("-" * 40)

    # Ki·ªÉm tra xem c√≥ markdown links trong k·∫øt qu·∫£ kh√¥ng
    full_text = " ".join([part.payload for part in result if part.type == "text"])

    if "[Xem chi ti·∫øt v√† mua h√†ng]" in full_text:
        print("\n‚ö†Ô∏è  FOUND markdown links in text - c·∫ßn x·ª≠ l√Ω")

        # T√¨m c√°c markdown links
        import re

        links = re.findall(r"\[([^\]]+)\]\(([^)]+)\)", full_text)
        print(f"Found {len(links)} markdown links:")
        for i, (text, url) in enumerate(links, 1):
            print(f"  {i}. [{text}]({url})")
    else:
        print("\n‚úÖ No markdown links found in text")


if __name__ == "__main__":
    test_markdown_links_case()
