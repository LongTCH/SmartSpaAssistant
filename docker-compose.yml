services:
  postgres:
    image: groonga/pgroonga:4.0.1-alpine-17
    container_name: ssa_postgres_dev
    networks: [ 'ssa_network' ]
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  qdrant:
    image: qdrant/qdrant
    container_name: ssa_qdrant_dev
    networks: [ 'ssa_network' ]
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ssa_server_dev
    environment:
      - DOTENV_FILE=.env.development
    env_file:
      - ./server/.env.development
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - ssa_network
  client:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: ssa_client_dev
    depends_on:
      - server
    networks:
      - ssa_network

  nginx:
    image: nginx:alpine
    container_name: ssa_nginx_dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - server
      - client
    networks:
      - ssa_network

volumes:
  postgres_data:
    name: ssa_postgres_data
  qdrant_data:
    name: ssa_qdrant_data

networks:
  ssa_network:
    driver: bridge
