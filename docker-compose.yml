version: '3.8'

volumes:
  postgres_storage:
    name: postgres_storage
  qdrant_storage:
    name: qdrant_storage

networks:
  ssa:
    name: n8n_ssa_network
    driver: bridge

services:
  postgres:
    image: groonga/pgroonga:4.0.1-alpine-17
    hostname: postgres
    container_name: postgres
    networks: [ 'ssa' ]
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgres_storage:/var/lib/postgresql/data

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: [ 'ssa' ]
    restart: unless-stopped
    ports:
      - 6333:6333
      - 6334:6334
    volumes:
      - qdrant_storage:/qdrant/storage
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    hostname: server
    container_name: ssa_server
    networks: [ 'ssa' ]
    restart: unless-stopped
    expose:
      - 8080
    env_file:
      - ./server/.env.production
    depends_on:
      - postgres
      - qdrant
    volumes:
      - ./server/static:/app/static
      - ./server/temp:/app/temp

  client:
    build:
      context: ./web
      dockerfile: Dockerfile
    hostname: client
    container_name: ssa_client
    networks: [ 'ssa' ]
    restart: unless-stopped
    expose:
      - 3000
    depends_on:
      - server
  nginx:
    image: nginx:alpine
    hostname: nginx
    container_name: ssa_nginx
    networks: [ 'ssa' ]
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl-validation:/var/www/certbot:ro
      - ./nginx/ssl/certs:/etc/nginx/ssl:ro
    depends_on:
      - client
      - server
